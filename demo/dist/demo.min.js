(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var Tree$1 = function () {
    function Tree(_ref) {
        var el = _ref.el,
            _ref$options = _ref.options,
            options = _ref$options === undefined ? {} : _ref$options;
        classCallCheck(this, Tree);

        this.el = el;
        this.options = {
            theme: 'default',
            data: {},
            iconClass: 'arrow-icon',
            clickCallBack: function clickCallBack(text, node) {
                console.log(text, node);
            }
        };
        this.level = 0;
        this.defaultNameClss = 'menu-name';
        this.defaultMenuType = [options.iconClass || 'arrow-icon'];
        // TODO: icon, clickBefore, clickAfter, childNode; 增加 checbox, disabled    
        // this.defaultMenuType = ['arrow-icon', 'has-selected', 'allow-disabled']; //TODO: add type

        // 初始化数据; 
        // TODO: 增加类型检测 / 容错处理;
        Object.assign(this.options, options);

        // 标记层级
        this.initLevel(this.options.data);

        this.render();
    }

    // 初始化数据层级  
    // TODO: initLevel 和 createElements代码提取复用


    createClass(Tree, [{
        key: 'initLevel',
        value: function initLevel(data) {
            var _this = this;

            data.level = this.level;
            var children = data.children;

            if (children) {
                this.level++;
                children.map(function (_, index) {
                    if (index === 0) {
                        _.level = _this.level;
                        _this.initLevel(_);
                    } else {
                        // 拿到当前层级首个对象的level;
                        _.level = children[0].level;
                        // Object.assign(_, children[0]); 
                    }
                });
            }
        }
    }, {
        key: 'createElements',
        value: function createElements() {
            var _this2 = this;

            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var text = data.text,
                _data$state = data.state,
                opened = _data$state.opened,
                selected = _data$state.selected,
                disabled = _data$state.disabled,
                children = data.children,
                _data$className = data.className,
                className = _data$className === undefined ? '' : _data$className,
                level = data.level;

            var defaultSize = ['lg', 'md', 'sm'];
            className = (defaultSize[level] || 'sm') + ' lab icon iconfont' + className + (disabled ? ' disabled' : '') + (children ? ' ' + this.options.iconClass : '') + (opened ? ' open' : ' close');
            var menuContainerClass = 'menu-container ' + (opened ? 'show' : 'hide');
            return '<div class=\'' + className + '\'>\n            <div class=\'' + this.defaultNameClss + '\'>' + text + '</div>\n            \n            <div class=\'' + menuContainerClass + '\'>' + (children ? children.map(function (params) {
                return _this2.createElements(params);
            }).join('') : '') + '</div>\n        </div>';
        }

        // 区分菜单类型; TODO: 增加 checbox, disabled         

    }, {
        key: 'getMenuType',
        value: function getMenuType() {
            var fullClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var currentClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            return fullClass.split(' ').find(function (str) {
                return str === currentClass;
            }); // indexOf会有盲区，'one-two' --- 'two'
        }
    }, {
        key: 'changeStatus',
        value: function changeStatus(dom) {
            var fullClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var status = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'close';

            var strArr = fullClass.split(status);
            var childrenClass = strArr.length > 1 ? ' show' : ' hide';
            dom.querySelector('.menu-container').className = 'menu-container' + childrenClass;
            var newClass = strArr.length > 1 ? strArr.join('') : fullClass + ' ' + status;
            dom.className = newClass;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var doms = this.createElements(this.options.data);
            var root = '<div class=\'tree-wrapper\'>' + doms + '</div>';
            try {
                this.el.addEventListener("click", function (event) {
                    var target = event.target || event.srcElement;
                    if (target === _this3.el) return;
                    if (target.className === _this3.defaultNameClss) {
                        //点击导航名
                        _this3.options.clickCallBack(target.innerText, target);
                    } else {
                        // 点击icon
                        var type = void 0;
                        _this3.defaultMenuType.map(function (str) {
                            !type && (type = _this3.getMenuType(target.className, str));
                        });

                        var _defaultMenuType = slicedToArray(_this3.defaultMenuType, 3),
                            opened = _defaultMenuType[0],
                            selected = _defaultMenuType[1],
                            disabled = _defaultMenuType[2];

                        switch (type) {
                            case opened:
                                _this3.changeStatus(target, target.className, 'close');
                                break;
                            case selected:
                                break; //TODO: 增加 checbox, disabled    
                        }
                    }
                });
                this.el.innerHTML = root;
            } catch (e) {
                console.log('Please check the elements');
            }
        }
    }]);
    return Tree;
}();

var data = {
    text: '一级',
    // isOpen: false,
    state: { opened: true },
    children: [{
        text: '二级1',
        state: { opened: false },
        children: [{
            text: '三级1-1',
            state: { opened: false },
            children: [{
                text: '四级1-1-1',
                state: { opened: false }
            }]
        }, {
            text: '三级1-2',
            state: { opened: false },
            children: [{
                text: '四级1-2-1',
                state: { selected: false }
            }]
        }]
    }, {
        text: '二级2',
        state: { opened: false },
        children: [{
            text: '三级2-1',
            state: { opened: false },
            children: [{
                text: '四级2-1-1',
                state: { opened: false }
            }]
        }, {
            text: '三级2-2',
            state: { opened: false },
            children: [{
                text: '四级2-2-1',
                state: { opened: false }
            }]
        }]
    }]

    // el: dom节点;   options: 配置项; iconClass: 自定义icon class;
};var tree = new Tree$1({ el: document.querySelector('.tree-menu'), options: { data: data, iconClass: 'arrow-icon-theme-gray' } });

})));
